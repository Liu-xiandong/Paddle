/* Copyright (c) 2020 PaddlePaddle Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License. */

#if defined(__CUDA_ARCH__)
  #undef __CUDA_ARCH__
#endif

#if defined(__CUDACC__)
  #undef __CUDACC__
#endif

#if defined(__CUDA__)
  #undef __CUDA__
#endif

#if defined(__NVCC__)
  #undef __NVCC__
#endif


#include <string>
#include <vector>
#include "paddle/fluid/platform/aligned_vector.h"
#include "paddle/fluid/platform/function_traits.h"
#include "paddle/fluid/framework/op_registry.h" //TODO
#include "paddle/fluid/framework/tensor.h"
#include "paddle/fluid/operators/elementwise/elementwise_add_op.h"
#include "paddle/fluid/operators/elementwise/elementwise_op.h"

#include "xpu/kernel/cluster_header.h"
#include "xpu/kernel/debug.h"
#include "xpu/kernel/math.h"
#include <xpu/runtime.h>


namespace paddle {
namespace operators {

//__global__ void elementwise() {
  //TODO
//}

void ComputeTest(){

}

template <typename T>
class ElementwiseAddXPU2Kernel : public framework::OpKernel<T> {

 public:
  void Compute(const framework::ExecutionContext& ctx) const override {
    std::cout<<"lxd_debug: XPU2 forward element_add !"<<std::endl;
    ComputeTest();
  }
};

template <typename T>
class ElementwiseAddGradXPU2Kernel : public ElemwiseGradKernel<T> {

 public:
  void Compute(const framework::ExecutionContext& ctx) const override {
    std::cout<<"lxd_debug: XPU2 backward element_add !"<<std::endl;
  }
};

}  // namespace operators
}  // namespace paddle

namespace ops = paddle::operators;


REGISTER_OP_XPU_KERNEL(elementwise_add, ops::ElementwiseAddXPU2Kernel<float>);
                       
REGISTER_OP_XPU_KERNEL(
    elementwise_add_grad, ops::ElementwiseAddGradXPU2Kernel<float>);

